--- a/drivers/net/wwan/t7xx/t7xx_pci.c
+++ b/drivers/net/wwan/t7xx/t7xx_pci.c
@@ -191,9 +191,10 @@ static int t7xx_pci_pm_init(struct t7xx_
 				DPM_FLAG_NO_DIRECT_COMPLETE);
 
 	iowrite32(T7XX_L1_BIT(0), IREG_BASE(t7xx_dev) + DISABLE_ASPM_LOWPWR);
+	t7xx_wait_pm_config(t7xx_dev);
 	pm_runtime_set_autosuspend_delay(&pdev->dev, PM_AUTOSUSPEND_MS);
 	pm_runtime_use_autosuspend(&pdev->dev);
-
+	pm_runtime_forbid(&pdev->dev);
 	return 0;
 }
 
@@ -206,12 +207,12 @@ void t7xx_pci_pm_init_late(struct t7xx_p
 			     D2H_INT_RESUME_ACK |
 			     D2H_INT_SUSPEND_ACK_AP |
 			     D2H_INT_RESUME_ACK_AP);
-	iowrite32(T7XX_L1_BIT(0), IREG_BASE(t7xx_dev) + ENABLE_ASPM_LOWPWR);
+	iowrite32(T7XX_L1_BIT(0), IREG_BASE(t7xx_dev) + DISABLE_ASPM_LOWPWR);
+	t7xx_wait_pm_config(t7xx_dev);
 	atomic_set(&t7xx_dev->md_pm_state, MTK_PM_RESUMED);
 
 	pm_runtime_mark_last_busy(&t7xx_dev->pdev->dev);
-	pm_runtime_allow(&t7xx_dev->pdev->dev);
-	pm_runtime_put_noidle(&t7xx_dev->pdev->dev);
+	pm_runtime_forbid(&t7xx_dev->pdev->dev);
 	complete_all(&t7xx_dev->init_done);
 }
 
@@ -528,7 +529,8 @@ static int __t7xx_pci_pm_resume(struct p
 
 	t7xx_dev = pci_get_drvdata(pdev);
 	if (atomic_read(&t7xx_dev->md_pm_state) <= MTK_PM_INIT) {
-		iowrite32(T7XX_L1_BIT(0), IREG_BASE(t7xx_dev) + ENABLE_ASPM_LOWPWR);
+		iowrite32(T7XX_L1_BIT(0), IREG_BASE(t7xx_dev) + DISABLE_ASPM_LOWPWR);
+		t7xx_wait_pm_config(t7xx_dev);
 		return 0;
 	}
 
@@ -618,7 +620,8 @@ static int __t7xx_pci_pm_resume(struct p
 
 	t7xx_dev->rgu_pci_irq_en = true;
 	t7xx_pcie_mac_set_int(t7xx_dev, SAP_RGU_INT);
-	iowrite32(T7XX_L1_BIT(0), IREG_BASE(t7xx_dev) + ENABLE_ASPM_LOWPWR);
+	iowrite32(T7XX_L1_BIT(0), IREG_BASE(t7xx_dev) + DISABLE_ASPM_LOWPWR);
+	t7xx_wait_pm_config(t7xx_dev);
 	pm_runtime_mark_last_busy(&pdev->dev);
 	atomic_set(&t7xx_dev->md_pm_state, MTK_PM_RESUMED);
 
@@ -850,7 +853,8 @@ static int t7xx_pci_probe(struct pci_dev
 
 	t7xx_pcie_mac_set_int(t7xx_dev, MHCCIF_INT);
 	t7xx_pcie_mac_interrupts_en(t7xx_dev);
-
+	iowrite32(T7XX_L1_BIT(0), IREG_BASE(t7xx_dev) + DISABLE_ASPM_LOWPWR);
+	t7xx_wait_pm_config(t7xx_dev);
 	return 0;
 
 err_remove_group:
--- a/drivers/net/wwan/t7xx/t7xx_hif_dpmaif_tx.c
+++ b/drivers/net/wwan/t7xx/t7xx_hif_dpmaif_tx.c
@@ -90,6 +90,11 @@ static unsigned int t7xx_dpmaif_release_
 	drb_skb_base = txq->drb_skb_base;
 	drb_base = txq->drb_base;
 
+	if (!drb_skb_base || !drb_base) {
+		dev_err(dpmaif_ctrl->dev, "txq%u: Invalid buffer base pointers\n", q_num);
+		return 0;
+	}
+
 	spin_lock_irqsave(&txq->tx_lock, flags);
 	drb_cnt = txq->drb_size_cnt;
 	cur_idx = txq->drb_release_rd_idx;
@@ -99,18 +104,20 @@ static unsigned int t7xx_dpmaif_release_
 		cur_drb = drb_base + cur_idx;
 		if (FIELD_GET(DRB_HDR_DTYP, le32_to_cpu(cur_drb->header)) == DES_DTYP_PD) {
 			cur_drb_skb = drb_skb_base + cur_idx;
-			if (!cur_drb_skb->is_msg)
+			if (!cur_drb_skb->is_msg && cur_drb_skb->bus_addr) {
 				dma_unmap_single(dpmaif_ctrl->dev, cur_drb_skb->bus_addr,
 						 cur_drb_skb->data_len, DMA_TO_DEVICE);
+				cur_drb_skb->bus_addr = 0;
+			}
 
 			if (!FIELD_GET(DRB_HDR_CONT, le32_to_cpu(cur_drb->header))) {
 				if (!cur_drb_skb->skb) {
-					dev_err(dpmaif_ctrl->dev,
-						"txq%u: DRB check fail, invalid skb\n", q_num);
-					continue;
+					dev_dbg(dpmaif_ctrl->dev,
+						"txq%u: DRB check fail, invalid skb at idx %u\n", 
+						q_num, cur_idx);
+				} else {
+					dev_kfree_skb_any(cur_drb_skb->skb);
 				}
-
-				dev_kfree_skb_any(cur_drb_skb->skb);
 			}
 
 			cur_drb_skb->skb = NULL;
@@ -125,8 +135,8 @@ static unsigned int t7xx_dpmaif_release_
 			cb->state_notify(dpmaif_ctrl->t7xx_dev, DMPAIF_TXQ_STATE_IRQ, txq->index);
 	}
 
-	if (FIELD_GET(DRB_HDR_CONT, le32_to_cpu(cur_drb->header)))
-		dev_err(dpmaif_ctrl->dev, "txq%u: DRB not marked as the last one\n", q_num);
+	if (i > 0 && FIELD_GET(DRB_HDR_CONT, le32_to_cpu(cur_drb->header)))
+		dev_dbg(dpmaif_ctrl->dev, "txq%u: DRB not marked as the last one\n", q_num);
 
 	return i;
 }
@@ -573,14 +584,15 @@ static void t7xx_dpmaif_tx_free_drb_skb(
 		if (!drb_skb->skb)
 			continue;
 
-		if (!drb_skb->is_msg)
+		if (!drb_skb->is_msg && drb_skb->bus_addr)
 			dma_unmap_single(txq->dpmaif_ctrl->dev, drb_skb->bus_addr,
 					 drb_skb->data_len, DMA_TO_DEVICE);
 
 		if (drb_skb->is_last) {
-			dev_kfree_skb(drb_skb->skb);
-			drb_skb->skb = NULL;
+			dev_kfree_skb_any(drb_skb->skb);
 		}
+		drb_skb->skb = NULL;
+		drb_skb->bus_addr = 0;
 	}
 }
 
